#!/bin/bash

########
# INFO #
########


##########
# CONFIG #
##########

DATE_SETUP="$(date +%s)"


#############
# FUNCTIONS #
#############

wsl_stop(){
  echo "==> la consola va a cerrarse"
  read a
  sudo killall -r '.*'
}

wsl_update(){
  if [[ -d /c/wsl/user/ccktools ]]; then
    cd /c/wsl/user/ccktools
    git pull
    cd
  fi
  # check_version
}

update_repo() {
  if [ -d ~/ccktools ]; then
    cd ~/ccktools/
    if git pull
      then
        echo "==> ccktools updated"
      else
        echo "==> ccktools update failed"
    fi
    # check_version
  fi
}

check_version(){
  echo "==> Online version:" $(curl -fsSL https://raw.githubusercontent.com/carcheky/ccktools/master/config/version?\${DATE_SETUP}) 2>>/dev/null
  echo "==> Local version:" $(cat /c/wsl/user/ccktools/config/version  2>>/dev/null)
}

set_wslconf() {
  if [ -f /etc/wsl.conf ]; then
    echo "==> /etc/wsl.conf encontrado"
    return
  fi
  if [ ! -f /etc/wsl.conf ]; then
    echo "==> Creando /etc/wsl.conf y saliendo"
    wget https://raw.githubusercontent.com/carcheky/ccktools/master/config/wsl.conf
    sudo mv -f wsl.conf /etc/
    wsl_stop
  fi
}

launcher_dirs(){
  # echo "==> quieres instalar los scripts personalizados? (y/n)"
  # read WSL_SETDIRS
  # if [ ${WSL_SETDIRS} = "y" ]; then
    echo "==> wsl setdirs"
    set_dirs
    create_links
  # fi
}

set_dirs() {
  if [ -d /c/wsl/ ]; then
    echo "==> Existe la ruta /c/wsl"
    return
  fi
  if [ ! -d /c/wsl/ ]; then
    sudo mkdir '/c/wsl/'
    sudo mkdir '/c/wsl/sites'
    sudo mkdir '/c/wsl/user'
    sudo mkdir '/c/wsl/error'
    sudo chown -R user:user '/c/wsl/'
    cd '/c/wsl/user'
    git clone https://github.com/carcheky/ccktools.git
  fi
  if [ ! -d /desadrupal ]; then
    mkdir /desadrupal
  fi
  if [ ! -d /desadrupal8 ]; then
    mkdir /desadrupal8
  fi
}

create_links() {
  if [ -d /c/wsl/user/ccktools ]; then

    sudo ln -s /c/wsl/user/ccktools/bin  ~
    sudo ln -s /c/wsl/user/ccktools  ~

    if ! grep -q "source ~/ccktools/.ccktools" ~/.bashrc ; then
      echo "source ~/ccktools/.ccktools" >> ~/.bashrc
    fi

    if -f "$HOME/.zshrc" ; then
      if ! grep -q "source ~/ccktools/.ccktools" ~/.zshrc ; then
        echo "source ~/ccktools/.ccktools" >> ~/.zshrc
      fi
    fi
    sudo apt install dos2unix -y 2>/dev/null

    find ~/bin/ -type f -exec chmod +x {} \;
    find ~/bin/ -type f -exec dos2unix {} \;
  fi
}

zsh_install(){
  # echo "==> quieres instalar zsh? (y/n)"
  # read WSL_ZSH
  # if [ ${WSL_ZSH} = "y" ]; then
      sudo apt install git -y
      sudo apt install nodejs -y
      sudo apt install npm -y
      sudo rm -fr $HOME/.oh-my-zsh
      sudo apt install zsh zsh-doc zsh-common -y

      sudo sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh?\${DATE_SETUP})"

      # sudo chown -R user:user ~
      # sudo chown -R root:root ~/.oh-my-zsh
      # sudo chmod -R 777 ~/.z*
      # compaudit | xargs chmod g-w,o-w

      if ! grep -q "bash -c -l zsh" ~/.bashrc ; then
        sudo echo "bash -c -l zsh" >> ~/.bashrc
      fi

      sudo chmod 666 ~/.zshrc
      sudo chown user:user ~/.zsh_history
      # if ! grep -q "export PATH=~/bin:\$PATH" ~/.zshrc ; then
      #   sudo echo "export PATH=~/bin:\$PATH" >> ~/.zshrc
      # fi

      if ! grep -q "source ~/ccktools/.ccktools" ~/.zshrc ; then
        sudo echo "source ~/ccktools/.ccktools" >> ~/.zshrc
        sudo find ~ -name .bashrc -exec sed -i 's/source ~\/ccktools\/.ccktools/# source ~\/ccktools\/.ccktools/g' {} \;
      fi

      # if ! grep -q "PATH=\"\$HOME/.config/composer/vendor/bin:\$PATH\"" ~/.zshrc ; then
      #   echo "PATH=\"\$HOME/.config/composer/vendor/bin:\$PATH\"">> ~/.zshrc
      # fi
  # fi
}

lamp_install(){
  # echo "==> quieres instalar lamp? (y/n)"
  # read WSL_LAMP
  # if [ ${WSL_LAMP} = "y" ]; then
    sudo apt install -y apache2 php
    sudo apt install -y php7.2-fpm libapache2-mod-php7.2 php7.2 php7.2-curl php7.2-gd php7.2-mbstring  php7.2-mysql php7.2-xml php7.2-zip php7.2-common


    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password password root'
    sudo debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password root'
    sudo apt install -y mysql-server

    sudo service apache2 stop & sudo service mysql stop

    sudo chmod 777 -R /var/cache/debconf

    sudo APP_PASS="root"
    sudo ROOT_PASS="root"
    sudo APP_DB_PASS="root"

    sudo apt clean -y
    sudo apt autoclean -y
    sudo dpkg --configure -a
    sudo apt autoremove -y

    sudo find /etc/php/ -name php.ini -exec sed -i 's/post_max_size = 8M/post_max_size = 8G/g' {} \;
    sudo find /etc/php/ -name php.ini -exec sed -i 's/upload_max_filesize = 2M/upload_max_filesize = 2G/g' {} \;
    sudo find /etc/php/ -name php.ini -exec sed -i 's/memory_limit = 128M/memory_limit = 2G/g' {} \;

    sudo chmod 777 /etc/apache2/apache2.conf
    sudo usermod -d /var/lib/mysql/ mysql

    if ! grep -q "AcceptFilter https none" /etc/apache2/apache2.conf ; then
      sudo echo "AcceptFilter https none" >> /etc/apache2/apache2.conf
    fi
    if ! grep -q "AcceptFilter http none" /etc/apache2/apache2.conf ; then
      sudo echo "AcceptFilter http none" >> /etc/apache2/apache2.conf
    fi

    sudo apt install php-mbstring -y
    sudo apt install php-curl -y
    sudo apt install zip php-zip unzip -y
    sudo apt install mcrypt -y
    sudo apt install composer -y

    sudo phpenmod mcrypt
    sudo phpenmod zip
    sudo phpenmod mbstring

    sudo a2enmod rewrite
    sudo a2enmod vhost_alias

    composer global require hirak/prestissimo
    composer global require drush/drush:^8
    $HOME/.config/composer/vendor/bin/drush init -n

    # if ! grep -q "PATH=\"\$HOME/.config/composer/vendor/bin:\$PATH\"" ~/.bashrc ; then
    #   echo "PATH=\"\$HOME/.config/composer/vendor/bin:\$PATH\"">> ~/.bashrc
    # fi

    sudo service apache2 stop & sudo service mysql stop
    sudo service apache2 start & sudo service mysql start


    echo "==> Usa HeidiSQL para gestionar las bases de datos https://www.heidisql.com/"
    echo "==> Server:     localhost "
    echo "==> User:       root"
    echo "==> Password:   root"
  # fi
}


wsl_install_reset(){
  # echo "==> quieres reiniciar todo? (y/n)"
  # read WSL_RESET
  # if [ "$WSL_RESET" = "y" ]; then
    echo "==> wsl RESET"
    sudo apt remove zsh apache2 php mysql-server -y
    sudo rm -fr /etc/wsl.conf
    sudo rm -fr /c/wsl
    sudo rm -fr $HOME/bin
    sudo rm -fr $HOME/ccktools
    # sudo rm -fr $HOME/.config/
    sudo rm -fr $HOME/.oh-my-zsh
    # sudo rm -fr $HOME/.profile
    sudo rm -fr $HOME/.sudo_as_admin_successful
    # sudo rm -fr $HOME/.viminfo
    sudo rm -fr $HOME/.zsh_history
    sudo rm -fr $HOME/.zshrc
    sudo rm -fr $HOME/.zshrc.pre-oh-my-zsh
    sudo rm -fr $HOME/.zcompdump
    sudo rm -fr $HOME/.zcompdump*
    sudo rm -fr $HOME/.z
    sudo rm -fr $HOME/.wget-hsts
    sudo apt clean -y
    sudo apt autoclean -y
    sudo dpkg --configure -a
    sudo apt autoremove -y
    vim ~/.bashrc
    wsl_stop
  fi
}

ubuntu_update(){
  # echo "==> ubuntu_update ? (y/n)"
  # read WSL_UPDATE_UBUNTU
  # if [ ${WSL_UPDATE_UBUNTU} = "y" ]; then
    echo "==> wsl ubuntu_update"
    echo "==> actualizando fuentes..."
    sudo apt update 2>/dev/null

    echo "==> actualizando paquetes..."
    sudo apt upgrade -y 2>/dev/null
  # fi
}

################
# MAIN PROGRAM #
################


set_wslconf
rm -fr .wget-hsts
sudo dpkg --configure -a

# check_version

if -d /c/wsl 
then
  mkdir -p '/c/wsl/error'
  echo "======================">/c/wsl/error/error-ccktools.log
fi
echo "${DATE_SETUP}">>/c/wsl/error/error-ccktools.log
echo "======================">>/c/wsl/error/error-ccktools.log
echo "==> wsl_update" >>/c/wsl/error/error-ccktools.log
wsl_update 2>>/c/wsl/error/error-ccktools.log

# echo "==> wsl_install_reset" >>/c/wsl/error/error-ccktools.log
# wsl_install_reset 2>>/c/wsl/error/error-ccktools.log

echo "==> ubuntu_update" >>/c/wsl/error/error-ccktools.log
ubuntu_update 2>>/c/wsl/error/error-ccktools.log

echo "==> launcher_dirs" >>/c/wsl/error/error-ccktools.log
launcher_dirs 2>>/c/wsl/error/error-ccktools.log

echo "==> lamp_install" >>/c/wsl/error/error-ccktools.log
lamp_install 2>>/c/wsl/error/error-ccktools.log

echo "==> zsh_install" >>/c/wsl/error/error-ccktools.log
zsh_install 2>>/c/wsl/error/error-ccktools.log
create_links
wsl_stop