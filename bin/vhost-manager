#!/bin/bash
# sudo rm -fr mnt testing /etc/apache2/sites*/testing*
ls -la /etc/apache2/sites-enabled

# VARS
# [] && false || true
# [!] && true || false

# drush="sudo /home/user/.config/composer/vendor/bin/drush"
composer=$(which composer)
lamp=$(which lamp)

# ask for var
read_site() {
    until [ ! -z ${SITE} ]; do
        echo "Escribe el nombre del sitio a gestionar:"
        read SITE
    done
}
read_install_type() {
    until [ ! -z ${INSTALL} ]; do
        echo "Escoge el tipo de instalacion:"
        read INSTALL
    done
}
echo -e "\n\n==============================================================\n==============================================================\n"

echo -e "\n==============================================================\n=============================================================="

# check installation type
[[ $1 ]] && INSTALL=$1 || echo -e "
==>      0) Ninguna, sólo vhost
==>      1) Druparcheky con composer (druparcheky)
==>      2) Wordpress
==> borrar) escribe <borrar> para borrar esta instalacion\n" && read_install_type

# check vhost name
[[ $2 ]] && SITE=$2 || read_site
# [[ $2 ]] && SITE=$2 || echo "Escribe el nombre del sitio:" && until ${SITE} do read SITE done;

echo -e "\n==============================================================\n==============================================================\n\n"

# set vars
WSL_FOLDER="/mnt/c/wsl"
SITES_FOLDER="/mnt/c/wsl/sites"
CONF_SITES_AVAILABLE="/etc/apache2/sites-available/${SITE}.conf"
CONF_SITES_ENABLED="/etc/apache2/sites-enabled/${SITE}.conf"
CONF_SITE_FOLDER="${SITES_FOLDER}/${SITE}"

#print options
echo -e "\n\n==============================================================\n==============================================================\n"
[[ $SITE ]] && echo -e "==> SITE: $SITE"
[[ $INSTALL ]] && echo -e "\n==> INSTALL: $INSTALL"
echo -e "\n==============================================================\n==============================================================\n\n"

#FUNCTIONS

# create folder
function newfolder() {
    echo -e "\n\n==============================================================\n=============================================================="
    if [[ -d ${CONF_SITE_FOLDER} ]]; then
        echo -e "Paso 1 ==> Existe la ruta, continuando."
    else
        echo -e "Paso 1 ==> NO existe la ruta, creandola..."
        mkdir -p ${CONF_SITE_FOLDER}
        mkdir -p ${CONF_SITE_FOLDER}/web
        mkdir ${WSL_FOLDER}/server/log/${SITE} -p

        sudo chmod -R 777 ${CONF_SITE_FOLDER}
        sudo chown -R user:user ${CONF_SITE_FOLDER}
    fi
    echo -e "=============================================================="

}

# create vhost
function newvhost() {
    if [[ $SITE ]]; then #comprueba si existe la ruta

        if [ -f ${CONF_SITES_AVAILABLE} ]; then
            echo -e "Paso 2 ==> Existe la configuracion \n${CONF_SITES_AVAILABLE}, continuando."
        else
            echo -e "Paso 2 ==> NO existe la configuracion \n${CONF_SITES_AVAILABLE}, \n==>creandola..."
            sudo rm ${CONF_SITES_AVAILABLE} 2>/dev/null
            sudo touch ${CONF_SITES_AVAILABLE} 2>/dev/null

            sudo echo "
<VirtualHost *:80 *:8888>
    ServerName ${SITE}.local
    ServerAdmin webmaster@${SITE}.local
    DocumentRoot ${CONF_SITE_FOLDER}/web
    RewriteEngine On
    RewriteOptions inherit
    CustomLog ${WSL_FOLDER}/server/log/${SITE}/${SITE}.log combined
    <Directory /mnt/c/wsl/sites/${SITE}>
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>


<IfModule mod_ssl.c>
	<VirtualHost *:443>
		DocumentRoot /mnt/c/wsl/sites/${SITE}/web
	    ServerName ${SITE}.local
		SSLEngine on
		SSLCertificateFile	/mnt/c/wsl/server/certs/localhost.crt
		SSLCertificateKeyFile /mnt/c/wsl/server/certs/localhost.key
		ErrorLog ${APACHE_LOG_DIR}/error.log
	    CustomLog /mnt/c/wsl/server/log/${SITE}/${SITE}-ssl.log combined
	</VirtualHost>
</IfModule>
            " | sudo tee --append ${CONF_SITES_AVAILABLE}
            sudo a2ensite ${SITE}.conf
            sudo service apache2 reload
        fi
        echo -e "=============================================================="
    fi
}

# install_drupal
function install_drupal() {
    echo -e "\n==> Instalando Drupal:\n"
    cd ${CONF_SITE_FOLDER}
    if [[ ! -f "./web/sites/default/settings.php" ]]; then

        echo -e "==> Bajando drupal core...\n"
        drush -y dl drupal --drupal-project-rename="web"
        sudo chmod -R 777 ${CONF_SITE_FOLDER}
        sudo chown -R user:user ${CONF_SITE_FOLDER}
        cd web
        sed -i '/\"drupal\/core\"\:/d' ./composer.json
        $composer require drupal/core --no-update
        $composer require drupal/admin_toolbar --no-update
        $composer require drupal/backup_migrate --no-update
        $composer require drupal/ctools --no-update
        $composer require drupal/devel --no-update
        $composer require drupal/pathauto --no-update
        $composer require drupal/module_filter --no-update
        $composer require drupal/imce --no-update
        $composer require drupal/config_devel --no-update
        sudo chown -R user:user ${CONF_SITE_FOLDER}
        sudo chown -R user:user ${CONF_SITE_FOLDER}
        sudo git clone https://github.com/carcheky/druparcheky_profile.git profiles/druparcheky
        sudo chmod -R 777 ${CONF_SITE_FOLDER}
        sudo chown -R user:user ${CONF_SITE_FOLDER}
        $composer update
        drush si druparcheky --db-url=mysql://root:root@localhost/${SITE} --account-name=admin --account-mail=admin@${SITE}.test --account-pass=admin --site-name=${SITE} --site-mail=${SITE}@${SITE}.test -y
    else
        echo -e "==> Existe una instalacion activa, borrala manualmente para usar este script"
    fi
    echo -e "=============================================================="
}

# install_drupal_composer
function install_druparcheky_core_composer_project() {
    echo -e "\n==> Instalando Drupal [druparcheky_core_composer_project] :\n"
    cd ${SITES_FOLDER}

    if [[ ! -d "$CONF_SITE_FOLDER" ]]; then
        git clone https://github.com/carcheky/druparcheky_core_composer_project.git $SITE

        cd $CONF_SITE_FOLDER
        mv *.code-workspace $SITE.code-workspace
        cd ${CONF_SITE_FOLDER}
        # rm -fr .git

        $composer install

        sudo chmod -R 777 .
        sudo chown -R user:user .

        cd ${CONF_SITE_FOLDER}/web

        drush si druparcheky --db-url=mysql://root:root@localhost/${SITE} --account-name=admin --account-mail=admin@${SITE}.test --account-pass=admin --site-name=${SITE} --site-mail=${SITE}@${SITE}.test -y --locale=es

        sudo chmod -R 777 .

        echo "

\$settings['config_sync_directory'] = '../config/sync';
\$settings['file_private_path'] = 'sites/default/private';
\$settings['file_public_path'] = 'sites/default/files';
\$settings['file_temp_path'] = '/tmp';
\$settings['file_chmod_directory'] = 0775;
\$settings['file_chmod_file'] = 0664;


        " >>${CONF_SITE_FOLDER}/web/sites/default/settings.php
        mkdir -p ${CONF_SITE_FOLDER}/web/sites/default/private
        mkdir -p ${CONF_SITE_FOLDER}/config/sync
        echo "terminado"
    else
        echo -e "==> Existe una isntalacion activa, borrala manualmente para usar este script"
    fi

    echo -e "=============================================================="
}

# install_wordpress
install_wordpress() {
    echo -e "\n==> Instalando wordpress :\n"
    cd ${SITES_FOLDER}

    if [[ ! -f "$SITE/web/wp-config.php" ]]; then

        cd ${CONF_SITE_FOLDER}

        wp core download --path=web --locale=es_ES

        cd ${CONF_SITE_FOLDER}/web

        wp config create --dbname=$SITE --dbuser=root --dbpass=root

        echo "define('FS_METHOD','direct');" >>wp-config.php

        mysql -uroot -proot -e "create database $SITE"

        wp core install --url=$SITE.local --title=$SITE --admin_user=admin --admin_password=admin --admin_email=info@$SITE.test

    else
        echo -e "==> Existe una instalación activa, bórrala manualmente para usar este script"
    fi

    echo -e "=============================================================="
}

# install_selector
function install_selector() {
    if [ ${INSTALL} ]; then
        echo -e "Paso 3 ==> Ejecutando tipo de instalacion...."

        case ${INSTALL} in
        # 1 | drupal)
        #     install_drupal
        #     ;;
        1 | drupal | drupal-composer)
            time install_druparcheky_core_composer_project
            ;;
        2 | wp | wordpress)
            time install_wordpress
            ;;
        0 | vhost)
            echo -e "Ninguna, solo vhost"
            echo "hola ${SITE}" >>/mnt/c/wsl/sites/${SITE}/web/index.html
            ;;
        borrar)
            echo -e "\n==============================================================\n\nQuieres borrar la base de datos ${SITE} [y/N]"
            echo -e "\n==============================================================\n"
            mysqladmin -hlocalhost -uroot -proot drop ${SITE}
            echo -e "==============================================================\n"
            echo "borrando instalación ${SITE}"
            sudo rm -fr /etc/apache2/sites-*/${SITE}.conf /mnt/c/wsl/sites/${SITE} /mnt/c/wsl/server/log/sites/${SITE}
            ;;
        *)
            echo -e "opción incorrecta, instalamos solo vhost"
            ;;
        esac
    fi
    echo -e "=============================================================="
}

# final message
function finalmessage() {
    echo -e "\n\n==============================================================\n==============================================================\n"
    echo -e "\n==> añade 127.0.0.1 ${SITE}.local a los hosts de su equipo & flush dns"
    echo -e "\n==> (software recomendado http://www.abelhadigital.com/hostsman/)"
    echo -e "\n==> http://${SITE}.local\n"
    echo -e "\n\n==============================================================\n==============================================================\n"
}

# add to hosts
function add_to_hosts() {
    runas /user:Administrator
}

# LOGIC

[[ ${INSTALL} == "borrar" ]] && echo "" || (sudo service mysql start) 2>/dev/null
[[ ${INSTALL} == "borrar" ]] && echo "" || (sudo service apache2 start) 2>/dev/null
[[ ${INSTALL} == "borrar" ]] && echo "" || newfolder
[[ ${INSTALL} == "borrar" ]] && echo "" || newvhost
install_selector
[[ ${INSTALL} == "borrar" ]] && echo "" || finalmessage

$lamp restart 1>/dev/null
